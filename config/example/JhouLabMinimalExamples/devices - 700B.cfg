# This configuration file defines a set of simulated devices that allow some 
# of ACQ4's acquisition capabilities to be tested on any machine. 
# 
# Also included are example configuration for every type of device supported
# by ACQ4, commented out. These may be used to construct a working 
# device configuration file.

# First, define the NI DAQ device we will use. For use with a real DAQ, simply
# remove the line 'mock: True'. The name 'DAQ', defined here, will appear
# many times throughout the config to refer to this device.
DAQ:
    driver: 'NiDAQ'

    # Default mode for AI channels. Options are 'NRSE', 'RSE', and 'DIFF'
    # This may be overridden for individual channels.
    defaultAIMode: 'NRSE'

    # Default input/output voltage ranges
    defaultAIRange: [-10, 10]
    defaultAORange: [-10, 10]


# A simple device connected to the DAQ that uses one AI channel and one AO 
# channel. As with all of the following device definitions, the name 
# 'DaqDevice' is arbitrary.
DaqDevice:
    driver: 'DAQGeneric'
    channels:
        AIChan:
            device: 'DAQ'
            channel: '/Dev1/ai0'
            type: 'ai'
        AOChan:
            device: 'DAQ'
            channel: '/Dev1/ao0'
            type: 'ao'
    


### Below are example configurations for real devices. Uncomment these and modify
### to your needs.

# Multiclamp 700A/B, single channel. 
# To use two channels, simply define a second device with the appropriate 
# device string. Note: if an incorrect device string is used, an error message
# will be pronted which lists the available device strings.
# 

 Clamp1:
     driver: 'MultiClamp'
     channelID: 'model:MC700B,sn:00107155,chan:1'

     #dllPath: 'path/to/AxMultiClampMsg.dll' ## optional way of specifying where the dll for MultiClamp commander is located. Usually not necessary, as acq4 will search standard installation locations.
#     #pythonExecutable: 'path/to/python/executable' ## only necessary if using MultiClampCommander v2.0.16 on a 64bit machine. Use this to specify a 32-bit python executable to use to connect to the commander.
     commandChannel: 
         device: 'DAQ'
         channel: '/Dev1/ao0'
         type: 'ao'
     primaryChannel: 
         device: 'DAQ'
         channel: '/Dev1/ai10'
         mode: 'NRSE'
         type: 'ai'
     secondaryChannel: 
         device: 'DAQ'
         channel: '/Dev1/ai1'
         mode: 'NRSE'
         type: 'ai'
     vcHolding: -65e-3
     icHolding: 0.0
     defaults:   # Default amplifier state. The amplifier will be 
                 # reconfigured with these options every time ACQ4 is 
                 # started. 
         IC:
             HoldingEnable: False
             Holding: 0.0
             TestSignalEnable: False
             #SlowCurrentInjEnable: False
             NeutralizationEnable: True
             #OscKillerEnable: True
             PrimarySignalGain: 2
             PrimarySignalLPF: 20e3
             PrimarySignalHPF: 0
             OutputZeroEnable: False
             BridgeBalEnable: True
             BridgeBalResist: 15e6
         VC:
             HoldingEnable: False
             Holding: 0.0
             TestSignalEnable: False
             #SlowCurrentInjEnable: False
             #NeutralizationEnable: False
             WholeCellCompEnable: False
             RsCompEnable: False
             #OscKillerEnable: True
             PrimarySignalGain: 2
             PrimarySignalLPF: 20e3
             PrimarySignalHPF: 0
             OutputZeroEnable: False
             LeakSubEnable: False

