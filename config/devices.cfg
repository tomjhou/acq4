# This configuration file defines a set of simulated devices that allow some 
# of ACQ4's acquisition capabilities to be tested on any machine. 
# 
# Also included are example configuration for every type of device supported
# by ACQ4, commented out. These may be used to construct a working 
# device configuration file.

# First, define the NI DAQ device we will use. For use with a real DAQ, simply
# remove the line 'mock: True'. The name 'DAQ', defined here, will appear
# many times throughout the config to refer to this device.
DAQ:
    driver: 'NiDAQ'
#    mock: True  # this is a fake device; remove this line for real NI DAQ devices.

    # Default mode for AI channels. Options are 'NRSE', 'RSE', and 'DIFF'
    # This may be overridden for individual channels.
    defaultAIMode: 'NRSE'

    # Default input/output voltage ranges
    defaultAIRange: [-10, 10]
    defaultAORange: [-10, 10]


# A simple device connected to the DAQ that uses one AI channel and one AO 
# channel. As with all of the following device definitions, the name 
# 'DaqDevice' is arbitrary.
DaqDevice:
    driver: 'DAQGeneric'
    channels:
        AIChan:
            device: 'DAQ'
            channel: '/Dev1/ai0'
            type: 'ai'
        AOChan:
            device: 'DAQ'
            channel: '/Dev1/ao0'
            type: 'ao'
    
# A simulated patch-clamp amplifier. It is connected to a Hodgkin-Huxley
# neuron model, allowing some of ACQ4's acquisition modules to be tested on
# a "real" system.
Clamp1:
    driver: 'Clamp1'
    simulator: 'builtin'  # Also supports 'neuron' if you have neuron+python
                            # installed. See lib/devices/MockClamp/neuronSim.py.
                            
    # Define two connections to the DAQ:
    Command:
        device: 'DAQ'
        channel: '/Dev1/ao0'
        type: 'ao'
    ScaledSignal:
        device: 'DAQ'
        channel: '/Dev1/ai5'
        mode: 'NRSE'
        type: 'ai'
        
    # Default holding values.
    icHolding: 0.0
    vcHolding: -65e-3



# A simulated camera. Generates noise and calcium-indicator-like signals.
Camera:
    driver: 'MockCamera'
    parentDevice: 'Microscope'
    transform:                          ## transform defines the relationship between the camera's
                                        ## sensor coordinate system (top-left is usually 0,0 and
                                        ## pixels are 1 unit wide) and the coordinate system of its
                                        ## scopeDevice
        pos: (0, 0)
        scale: (5*2.581*um/px, -5*2.581*um/px)  # Calibrated at 2.581*um/px under 5x objective
                                                # for this example, we have inverted the y-axis of the camera.
        angle: 0

    exposeChannel:                                 ## Channel for recording expose signal
        device: 'DAQ'
        channel: '/Dev1/port0/line0'
        type: 'di'
    #triggerOutChannel: 'DAQ', '/Dev1/PFI5'        ## Channel the DAQ should trigger off of to sync with camera
    triggerInChannel:                              ## Channel the DAQ should raise to trigger the camera
        device: 'DAQ'
        channel: '/Dev1/port0/line1'
        type: 'do'

    defaults:
        exposure: 10*ms


# A laser device. Simulating a shutter opening currently has no effect.
Laser-UV:
    driver: 'Laser'
    parentDevice: 'Microscope'
    pulseRate: 100*kHz                      ## Laser's pulse rate
    power: 100*mW
    shutter:
        device: 'DAQ'
        channel: '/Dev1/line30'           ## channel for triggering shutter
        type: 'do'
        delay: 10*ms                      ## how long it takes the shutter to fully open
    wavelength: 355*nm
    alignmentMode:
        shutter: True
    defaultPowerMeter: 'NewportMeter'


### Below are example configurations for real devices. Uncomment these and modify
### to your needs.

# Multiclamp 700A/B, single channel. 
# To use two channels, simply define a second device with the appropriate 
# device string. Note: if an incorrect device string is used, an error message
# will be pronted which lists the available device strings.
# 
Clamp1:
    driver: 'MultiClamp'
#    channelID: 'model:MC700A,com:3,dev:0,chan:1'
    channelID: 'model:MC700B,sn:00107155,chan:1'
    #dllPath: 'path/to/AxMultiClampMsg.dll' ## optional way of specifying where the dll for MultiClamp commander is located. Usually not necessary, as acq4 will search standard installation locations.
    #pythonExecutable: 'path/to/python/executable' ## only necessary if using MultiClampCommander v2.0.16 on a 64bit machine. Use this to specify a 32-bit python executable to use to connect to the commander.
    commandChannel: 
        device: 'DAQ'
        channel: '/Dev1/ao0'
        type: 'ao'
    primaryChannel: 
        device: 'DAQ'
        channel: '/Dev1/ai10'
        mode: 'NRSE'
        type: 'ai'
    secondaryChannel: 
        device: 'DAQ'
        channel: '/Dev1/ai9'
        mode: 'NRSE'
        type: 'ai'
    vcHolding: -65e-3
    icHolding: 0.0
    defaults:   # Default amplifier state. The amplifier will be 
                # reconfigured with these options every time ACQ4 is 
                # started. 
        IC:
            HoldingEnable: False
            Holding: 0.0
            TestSignalEnable: False
            #SlowCurrentInjEnable: False
            NeutralizationEnable: True
            #OscKillerEnable: True
            PrimarySignalGain: 2
            PrimarySignalLPF: 20e3
            PrimarySignalHPF: 0
            OutputZeroEnable: False
            BridgeBalEnable: True
            BridgeBalResist: 15e6
        VC:
            HoldingEnable: False
            Holding: 0.0
            TestSignalEnable: False
            #SlowCurrentInjEnable: False
            #NeutralizationEnable: False
            WholeCellCompEnable: False
            RsCompEnable: False
            #OscKillerEnable: True
            PrimarySignalGain: 2
            PrimarySignalLPF: 20e3
            PrimarySignalHPF: 0
            OutputZeroEnable: False
            LeakSubEnable: False


# Sutter MPC-200 stage and manipulator controllers. Each device represents one 
# drive on the controller; for more drives simply add a new device and set the
# drive number accordingly.
# SutterStage:
#     driver: 'SutterMPC200'
#     port: "COM10"
#     drive: 1
#     scale: 1.0, 1.0, 1.0  ## If the MPC200 does not report its scale 
#                             ## correctly, then corrections may be applied
#                             ## here.

# Sutter MP-285 stage and manipulator controllers. NOTE--The MP-285 has a design
# flaw: if you turn an attached ROE while the computer is communicating with the
# controller, then the controller will crash. This can be circumvented with 
# custom interfacing hardware (see lib/drivers/SutterMP285/mp285_hack).
# SutterStage:
#     driver: 'SutterMP285'
#     port: "COM10"
#     baud: 19200
#     scale: 1.0, 1.0, 1.0  ## MP285 _should_ report its own scale correctly; 
#                             ## no need to adjust it here.






# Thorlabs MFC-1 focus control motor
# FocusMotor:
#     driver: 'ThorlabsMFC1'
#     port: 'COM9'
#     parentDevice: 'SutterStage'
#     scale: 1.0, 1.0, 1e-6 * 85e-6 / 10e-3   # calibrated 2015.02


# Device that polls digital IO ports to determine state of hardware switches. 
# This is used to determine which objective is in use on 2-objective microscopes.
# Switch:    
#     driver: 'DIOSwitch'
#     channels: 
#         objective:
#             device: 'DAQ'
#             channel: '/Dev1/line12'  ## indicates the state of the objective switch
#         PMT:
#             device: 'DAQ'
#             channel: '/Dev1/line6'   ## detects when PMT aperture is open
#     interval: 300e-3  ## poll for changes every 300ms

